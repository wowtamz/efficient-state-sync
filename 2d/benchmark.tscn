[gd_scene load_steps=2 format=3 uid="uid://dx11sgjuj2s2j"]

[sub_resource type="GDScript" id="GDScript_5df01"]
script/source = "extends Control

var unit_scene: PackedScene = preload(\"res://2d/unit.tscn\")
var shadow_scene: PackedScene = preload(\"res://2d/shadow.tscn\")

var sent_bytes: int = 0
var send_rate: int = 30
var _counter: float = 0.0
var _send_rate_counter: float = 0.0
var _use_batching: bool = false

var id_counter = 0
var shadows := Dictionary()

func _ready() -> void:
	connect_buttons()

func spawn_object() -> void:
	add_unit(id_counter)
	add_shadow(id_counter)
	id_counter += 1

func despawn_object() -> void:
	if id_counter > 0:
		id_counter -= 1
		var unit = get_unit(id_counter)
		var shadow = get_shadow(id_counter)
		shadows.erase(id_counter)
		unit.queue_free()
		shadow.queue_free()

func add_unit(id: int = id_counter) -> void:
	var new_unit = unit_scene.instantiate()
	new_unit.id = id
	new_unit.position.x = 256.0 + randi_range(-200, 200)
	new_unit.position.y = 360 + randi_range(-200, 200)
	add_child(new_unit)
	if id > 0:
		var root_unit = get_unit(0)
		new_unit.set_change_state(root_unit.changes_state)
		new_unit.apply_rotation(root_unit.get(\"_angle\") > 0.0)
		new_unit.set_move_vertically(root_unit.move_vertially)
		new_unit.set_move_horizontally(root_unit.move_horizontally)

func add_shadow(id: int = id_counter) -> void:
	var new_shadow = shadow_scene.instantiate()
	new_shadow.id = id_counter
	add_child(new_shadow)

func connect_buttons() -> void:
	$ui/b_add.connect(\"pressed\", Callable(self, \"spawn_object\"))
	$ui/b_remove.connect(\"pressed\", Callable(self, \"despawn_object\"))
	$ui/b_batch.connect(\"toggled\", Callable(self, \"set_use_batching\"))
	$ui/b_vert.connect(\"toggled\", Callable(self, \"set_move_vertically\"))
	$ui/b_hor.connect(\"toggled\", Callable(self, \"set_move_horizontally\"))
	$ui/b_state.connect(\"toggled\", Callable(self, \"set_change_state\"))
	$ui/b_rotation.connect(\"toggled\", Callable(self, \"apply_rotation\"))
	$ui/b_packet_count/spinbox.connect(\"value_changed\", Callable(self, \"set_send_rate\"))

func set_use_batching(val: bool):
	_use_batching = val

func set_change_state(val: bool) -> void:
	for node in get_tree().get_nodes_in_group(\"unit\"):
		node.set_change_state(val)

func apply_rotation(val: bool) -> void:
	for node in get_tree().get_nodes_in_group(\"unit\"):
		node.apply_rotation(val)

func set_move_vertically(val: bool) -> void:
	for node in get_tree().get_nodes_in_group(\"unit\"):
		node.set_move_vertically(val)

func set_move_horizontally(val: bool) -> void:
	for node in get_tree().get_nodes_in_group(\"unit\"):
		node.set_move_horizontally(val)

func set_send_rate(val: int) -> void:
	send_rate = val

func _process(delta: float) -> void:
	process_state_sync(delta)
	process_send_rate(delta)
	$ui/units.text = \"units: %d\" % (id_counter)

func process_state_sync(delta: float) -> void:
	_send_rate_counter += delta
	if _send_rate_counter > 1.0 / float(send_rate):
		_send_rate_counter = 0.0
		var batch_data: Dictionary[int, StateData] = {}
		for node in get_tree().get_nodes_in_group(\"unit\"):
			var packet = node.get_packet()
			if packet:
				if _use_batching:
					batch_data[node.id] = packet
				else:
					var byte_array: PackedByteArray = packet.to_bytes()
					add_sent_bytes(byte_array.size())
					var shadow = get_shadow(node.id)
					shadow.on_receive_packet(byte_array)
		if not batch_data.is_empty():
			var batch_packet = BatchStateData2D.new(batch_data)
			var batch_bytes = batch_packet.to_bytes()
			add_sent_bytes(batch_bytes.size())
			on_receive_batch(batch_bytes)

func on_receive_batch(bytes: PackedByteArray) -> void:
	var batch = BatchStateData2D.from_bytes(bytes)
	for key in batch.get_data().keys():
		var shadow = get_shadow(key)
		if shadow:
			var state_data: StateData = batch.get_data()[key]
			shadow.sync_state(state_data)

func process_send_rate(delta: float) -> void:
	_counter += delta
	if _counter >= 1.0:
		var bits_per_sec = sent_bytes * 8
		$ui/bps.text = \"%.2f kbits/sec\" % (float(bits_per_sec) / 1000.0) if bits_per_sec > 500 else \"%d bits/sec\" % bits_per_sec
		sent_bytes = 0.0
		_counter = 0.0

func add_sent_bytes(amount: int) -> void:
	var udp_header = 8 # 64 bit udp header
	sent_bytes += udp_header + amount

func get_sent_bits() -> int:
	return sent_bytes * 8

func get_unit(id: int) -> Node2D:
	for node in get_tree().get_nodes_in_group(\"unit\"):
		if node.id == id:
			return node
	return null

func get_shadow(id: int) -> Node2D:
	if shadows.has(id):
		return shadows[id]
	for node in get_tree().get_nodes_in_group(\"shadow\"):
		if node.id == id:
			shadows[id] = node
			return node
	return null
"

[node name="benchmark" type="Control"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_5df01")

[node name="ui" type="GridContainer" parent="."]
layout_mode = 1
anchors_preset = 10
anchor_right = 1.0
offset_bottom = 82.0
grow_horizontal = 2
size_flags_horizontal = 4
columns = 10

[node name="bps" type="Label" parent="ui"]
custom_minimum_size = Vector2(128, 0)
layout_mode = 2
text = "kbits/sec"

[node name="units" type="Label" parent="ui"]
custom_minimum_size = Vector2(128, 0)
layout_mode = 2
text = "units: 0"

[node name="vsep" type="VSeparator" parent="ui"]
layout_mode = 2
size_flags_horizontal = 0

[node name="b_add" type="Button" parent="ui"]
layout_mode = 2
text = "Add unit"

[node name="b_remove" type="Button" parent="ui"]
layout_mode = 2
text = "Remove unit"

[node name="b_batch" type="Button" parent="ui"]
layout_mode = 2
focus_mode = 0
toggle_mode = true
text = "Use batching"

[node name="b_vert" type="Button" parent="ui"]
layout_mode = 2
focus_mode = 0
toggle_mode = true
text = "Move vertically"

[node name="b_hor" type="Button" parent="ui"]
layout_mode = 2
focus_mode = 0
toggle_mode = true
text = "Move horizontally"

[node name="b_state" type="Button" parent="ui"]
layout_mode = 2
focus_mode = 0
toggle_mode = true
text = "Change state"

[node name="b_rotation" type="Button" parent="ui"]
layout_mode = 2
focus_mode = 0
toggle_mode = true
text = "Apply Rotation
"

[node name="b_packet_count" type="HBoxContainer" parent="ui"]
layout_mode = 2

[node name="label" type="Label" parent="ui/b_packet_count"]
layout_mode = 2
text = "packets/sec"

[node name="spinbox" type="SpinBox" parent="ui/b_packet_count"]
layout_mode = 2
value = 30.0
